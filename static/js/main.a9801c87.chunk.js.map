{"version":3,"sources":["Services/Constants.js","Services/Api-service.js","App.styled.jsx","Services/Notification.js","Components/SearchBar/SearchBar.styled.jsx","Components/SearchBar/SearchBar.jsx","Components/ImageGalleryItem/ImageGalleryItem.styled.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.styled.jsx","Components/ImageGallery/ImageGallery.jsx","Components/LoadMoreButton/LoadMoreButton.styled.jsx","Components/LoadMoreButton/LoadMoreButton.jsx","Components/Spinner/Spinner.styled.jsx","Components/Spinner/Spinner.jsx","Components/Modal/Modal.styled.jsx","Components/Modal/Modal.jsx","App.jsx","index.js"],"names":["Pixabay","axios","defaults","baseURL","Api","searchQuery","page","url","get","data","hits","StyledApp","styled","div","onErrorNotification","error","title","text","delay","Header","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","SearchBar","onSubmit","useState","setSearchQuery","resetState","e","preventDefault","trim","info","type","autoComplete","autoFocus","placeholder","name","value","onChange","target","toLowerCase","Item","Image","ImageGalleryItem","tags","previewImg","selectedImage","src","alt","onClick","List","ImageGallery","images","map","id","webformatURL","largeImageURL","Button","LoadMoreButton","LoaderContainer","Spinner","color","height","width","timeout","ModalOverlay","ModalContainer","modalRoot","document","querySelector","Modal","selectedImg","onClose","useEffect","window","addEventListener","handleKeyDown","code","createPortal","currentTarget","App","setPage","setImages","setSelectedImg","setAlt","status","setStatus","a","getImages","length","Error","prevImages","scrollTo","top","documentElement","scrollHeight","behavior","getFetchImages","handleFormSubmit","query","loadMoreBtnClick","prevPage","handleSelectedImage","largeImageUrl","ReactDOM","render","StrictMode","getElementById","smoothscroll","polyfill"],"mappings":"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","file":"static/js/main.a9801c87.chunk.js","sourcesContent":["export const Pixabay = {\n  BASE_URL: 'https://pixabay.com/api/',\n  KEY: '21849965-5d080cd355a76516303a4dd69',\n};\n","import axios from 'axios';\nimport { Pixabay } from './Constants';\n\naxios.defaults.baseURL = Pixabay.BASE_URL;\n\nexport class Api {\n  static async getImages(searchQuery, page) {\n    const url = `?q=${searchQuery}&page=${page}&key=${Pixabay.KEY}&image_type=photo&orientation=horizontal&per_page=12\n        `;\n    const { data } = await axios.get(url);\n\n    return data.hits;\n  }\n}\n\n// async function fetchImages(searchQuery, page) {\n//     const url = `/?image_type=photo&orientation=horizontal&q=${searchQuery}&page=${page}&per_page=12&key=${API_KEY}`\n//     const { data } = await axios.get(url);\n//     return data.hits;\n// }\n\n// export default fetchImages;\n","// .App {\n//   text-align: center;\n// }\n\n// .App-logo {\n//   height: 40vmin;\n//   pointer-events: none;\n// }\n\n// @media (prefers-reduced-motion: no-preference) {\n//   .App-logo {\n//     animation: App-logo-spin infinite 20s linear;\n//   }\n// }\n\n// .App-header {\n//   background-color: #282c34;\n//   min-height: 100vh;\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n//   justify-content: center;\n//   font-size: calc(10px + 2vmin);\n//   color: white;\n// }\n\n// .App-link {\n//   color: #61dafb;\n// }\n\n// @keyframes App-logo-spin {\n//   from {\n//     transform: rotate(0deg);\n//   }\n//   to {\n//     transform: rotate(360deg);\n//   }\n// }\nimport styled from '@emotion/styled';\n\nexport const StyledApp = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n`;\n","import { info, error } from '@pnotify/core';\nimport '@pnotify/core/dist/Material.css';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\n\nexport const onInfoNotification = () => {\n  info({\n    title: 'Invalid request',\n    text: `The search field is empty!`,\n    delay: 2000,\n  });\n};\n\nexport const onErrorNotification = () => {\n  error({\n    title: 'Invalid request',\n    text: `Please enter the right query!`,\n    delay: 2000,\n  });\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Header = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  margin-bottom: 25px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { onInfoNotification } from '../../Services/Notification';\nimport {\n  Header,\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from './SearchBar.styled';\n\nexport default function SearchBar({ onSubmit }) {\nconst [searchQuery, setSearchQuery] = useState('');\n\n  const handleInputChange = e => {\n    setSearchQuery(e.target.value.toLowerCase())\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchQuery.trim() === '') {\n      onInfoNotification();\n      return;\n    }\n\n    onSubmit(searchQuery);\n        resetState();\n  };\n\n  const resetState = () => {\n        setSearchQuery('');\n    }\n\n  \n    return (\n      <Header>\n        <SearchForm onSubmit={handleSubmit}>\n          <SearchFormButton type=\"submit\">\n            <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n          </SearchFormButton>\n          <SearchFormInput\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images\"\n            name=\"searchQuery\"\n            value={searchQuery}\n            onChange={handleInputChange}\n          />\n        </SearchForm>\n      </Header>\n    )\n  }\n\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import React from 'react';\n// import { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { Item, Image } from './ImageGalleryItem.styled';\n\nexport default function ImageGalleryItem({ tags, previewImg, selectedImage }) {\n  return (\n    <Item>\n      <Image src={previewImg} alt={tags} onClick={selectedImage} />\n    </Item>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  tags: PropTypes.string.isRequired,\n  previewImg: PropTypes.string.isRequired,\n  selectedImage: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  /* margin-bottom: 25px; */\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ImageGalleryItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const ImageGalleryItemImage = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\nimport { List } from './ImageGallery.styled';\n\nexport default function ImageGallery({ images, selectedImage }) {\n  return (\n    <List>\n      {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n        <ImageGalleryItem\n          key={id}\n          previewImg={webformatURL}\n          tags={tags}\n          selectedImage={() => selectedImage(largeImageURL, tags)}\n        />\n      ))}\n    </List>\n  );\n}\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  ),\n  selectedImage: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const Button = styled.button`\n  padding: 8px 16px;\n  border-radius: 2px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 15px;\n  color: #fff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './LoadMoreButton.styled';\n\nexport default function LoadMoreButton({ onClick }) {\n  return (\n    <Button type=\"button\" onClick={onClick}>\n      Load more\n    </Button>\n  );\n}\n\nLoadMoreButton.propTypes = {\n  onClick: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n`;\n","import Loader from 'react-loader-spinner';\nimport { LoaderContainer } from './Spinner.styled';\n\nexport default function Spinner() {\n  return (\n    <LoaderContainer>\n      <Loader\n        type=\"ThreeDots\"\n        color=\"#3f51b5\"\n        height={200}\n        width={200}\n        timeout={30000}\n      />\n    </LoaderContainer>\n  );\n}\n","import styled from '@emotion/styled/macro';\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n  padding-top: 40px;\n  padding-bottom: 40px;\n  margin-bottom: 20px;\n`;\n\nexport const ModalContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 70vw;\n  height: auto;\n  margin: auto;\n  border-radius: 4px;\n  overflow: hidden;\n`;\n\nexport const Image = styled.img`\n  object-fit: cover;\n`;\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { ModalOverlay, ModalContainer, Image } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal ({selectedImg, tags, onClose}){\n  useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n        window.addEventListener('keydown', handleKeyDown)\n        }\n  })\n  \n  const handleKeyDown = e => {\n        if (e.code === 'Escape') {\n            onClose();\n        }\n    }\n\n    const handleBackdropClick = (e) => {\n        if (e.target === e.currentTarget) {\n            onClose();\n        }\n    }\n\n  return createPortal(\n            <ModalOverlay onClick={handleBackdropClick}>\n             <ModalContainer>\n        <Image\n          src={selectedImg}\n          alt={tags}\n        />\n             </ModalContainer>\n            </ModalOverlay>, modalRoot)\n}\n\n\nModal.propTypes = {\n        selectedImg: PropTypes.string,\n        tags: PropTypes.string,\n        onClose: PropTypes.func,\n    }\n// export default class Modal extends Component {\n//   static propTypes = {\n//     selectedImg: PropTypes.string,\n//     tags: PropTypes.string,\n//     onClose: PropTypes.func,\n//   };\n\n//   componentDidMount() {\n//     window.addEventListener('keydown', this.handleKeyDown);\n//   }\n\n//   componentWillUnmount() {\n//     window.removeEventListener('keydown', this.handleKeyDown);\n//   }\n\n//   handleKeyDown = e => {\n//     if (e.code === 'Escape') {\n//       this.props.onClose();\n//     }\n//   };\n\n//   handleBackdropClick = e => {\n//     if (e.target === e.currentTarget) {\n//       this.props.onClose();\n//     }\n//   };\n\n//   render() {\n//     const { selectedImg, tags } = this.props;\n\n//     return createPortal(\n//       <ModalOverlay onClick={this.handleBackdropClick}>\n//         <ModalContainer>\n//           <Image src={selectedImg} alt={tags} />\n//         </ModalContainer>\n//       </ModalOverlay>,\n//       modalRoot,\n//     );\n//   }\n// }\n","// import React, { Component } from 'react';\nimport React, { useState, useEffect } from 'react';\n// import PropTypes from 'prop-types';\nimport { Api } from './Services/Api-service';\nimport { StyledApp } from './App.styled';\nimport { onErrorNotification } from './Services/Notification';\nimport SearchBar from './Components/SearchBar/SearchBar';\nimport ImageGallery from './Components/ImageGallery/ImageGallery';\nimport LoadMoreButton from './Components/LoadMoreButton/LoadMoreButton';\nimport Spinner from './Components/Spinner/Spinner';\nimport Modal from './Components/Modal/Modal';\n\n\nexport default function App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [images, setImages] = useState([]);\n  const [selectedImg, setSelectedImg] = useState(null);\n  const [alt, setAlt] = useState(null);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return\n    }\n\n    async function getFetchImages() {\n      setStatus('pending');\n      try {\n        const images = await Api.getImages(searchQuery, page);\n\n           if (!images.length) {\n          throw new Error();\n        }\n\n        setImages(prevImages => [...prevImages, ...images]);\n        setStatus('resolved');\n\n         if (page > 1) {\n          window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: 'smooth',\n          });\n         }\n\n        } catch (error) {\n        onErrorNotification();\n        setStatus('rejected');\n      }\n      }\n    getFetchImages();\n\n  }, [searchQuery, page]);\n       \n        \n  const handleFormSubmit = query => {\n    if (searchQuery === query) {\n      return\n    }\n    \n    resetState();\n    setSearchQuery(query);\n  };\n\n  const loadMoreBtnClick = () => {\n    setPage(prevPage => prevPage + 1);\n  }\n\n  const handleSelectedImage = (largeImageUrl, tags) => {\n    setSelectedImg(largeImageUrl);\n    setAlt(tags);\n  }\n  \n  const closeModal = () => {\n    setSelectedImg(null)\n  }\n\n  const resetState = () => {\n    setSearchQuery('');\n    setPage(1);\n    setImages([]);\n    setSelectedImg(null);\n    setAlt(null);\n    setStatus('idle');\n  }\n\n  if (status === 'idle') {\n    return <SearchBar onSubmit={handleFormSubmit} />\n  }\n\n  if (status === 'pending') {\n    return (\n      <StyledApp>\n        <SearchBar onSubmit={handleFormSubmit} />\n        <ImageGallery images={images} selectedImage={handleSelectedImage} />\n          <Spinner />\n        {images.length > 0 &&\n          <LoadMoreButton onClick={loadMoreBtnClick} />\n        }\n      </StyledApp>\n    )\n  }\n\n  if (status === 'resolved') {\n    return (\n      <StyledApp>\n        <SearchBar onSubmit={handleFormSubmit} />\n        <ImageGallery images={images} selectedImage={handleSelectedImage} />\n        {selectedImg &&\n          <Modal selectedImg={selectedImg} tags={alt} onClose={closeModal} />\n        }\n        {images.length > 0 &&\n          <LoadMoreButton onClick={loadMoreBtnClick} />}\n      </StyledApp>\n)\n  }\n\n  if (status === 'rejected') {\n    return (\n     <StyledApp>\n       <SearchBar onSubmit={handleFormSubmit} />\n     </StyledApp>\n    )\n  }\n}\n\n\n\n// export default class App extends Component {\n//   static propTypes = { searchQuery: PropTypes.string };\n\n//   state = {\n//     searchQuery: '',\n//     page: 1,\n//     images: [],\n//     selectedImg: null,\n//     alt: null,\n//     status: 'idle',\n//   };\n\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, page } = this.state;\n\n//     if (prevState.searchQuery !== searchQuery || prevState.page !== page) {\n//       this.setState({ status: 'pending' });\n\n//       try {\n//         const images = await Api.getImages(searchQuery, page);\n\n//         if (!images.length) {\n//           throw new Error();\n//         }\n\n//         this.setState(prevState => ({\n//           images: [...prevState.images, ...images],\n//           status: 'resolved',\n//         }));\n//       } catch (error) {\n//         onErrorNotification();\n//         this.setState({ status: 'rejected' });\n//       }\n\n//       page > 1 &&\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight,\n//           behavior: 'smooth',\n//         });\n//     }\n//   }\n\n//   handleFormSubmit = searchQuery => {\n//     if (this.state.searchQuery === searchQuery) {\n//       return;\n//     }\n\n//     this.resetState();\n//     this.setState({ searchQuery });\n//   };\n\n//   loadMoreBtnClick = () => {\n//     this.setState(prevState => ({\n//       page: prevState.page + 1,\n//     }));\n//   };\n\n//   handleSelectedImage = (largeImageUrl, tags) => {\n//     this.setState({\n//       selectedImg: largeImageUrl,\n//       alt: tags,\n//     });\n//   };\n\n//   closeModal = () => {\n//     this.setState({\n//       selectedImg: null,\n//     });\n//   };\n\n//   resetState = () => {\n//     this.setState({\n//       searchQuery: '',\n//       page: 1,\n//       images: [],\n//       selectedImg: null,\n//       alt: null,\n//       status: 'idle',\n//     });\n//   };\n\n//   render() {\n//     const { images, selectedImg, alt, status } = this.state;\n\n//     if (status === 'idle') {\n//       return <SearchBar onSubmit={this.handleFormSubmit} />;\n//     }\n\n//     if (status === 'pending') {\n//       return (\n//         <>\n//           <SearchBar onSubmit={this.handleFormSubmit} />\n//           <Spinner />\n//           <ImageGallery\n//             images={images}\n//             selectedImage={this.handleSelectedImage}\n//           />\n//           {images.length > 0 && (\n//             <LoadMoreButton onClick={this.loadMoreBtnClick} />\n//           )}\n//         </>\n//       );\n//     }\n\n//     if (status === 'resolved') {\n//       return (\n//         <>\n//           <SearchBar onSubmit={this.handleFormSubmit} />\n//           <ImageGallery\n//             images={images}\n//             selectedImage={this.handleSelectedImage}\n//           />\n//           {selectedImg && (\n//             <Modal\n//               selectedImg={selectedImg}\n//               tags={alt}\n//               onClose={this.closeModal}\n//             />\n//           )}\n//           {images.length > 0 && (\n//             <LoadMoreButton onClick={this.loadMoreBtnClick} />\n//           )}\n//         </>\n//       );\n//     }\n\n//     if (status === 'rejected') {\n//       return (\n//         <>\n//           <SearchBar onSubmit={this.handleFormSubmit} />\n//         </>\n//       );\n//     }\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport smoothscroll from 'smoothscroll-polyfill';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\nsmoothscroll.polyfill();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}